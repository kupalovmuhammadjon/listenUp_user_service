// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: podcasts.proto

package podcasts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PodcastsClient is the client API for Podcasts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodcastsClient interface {
	CreatePodcast(ctx context.Context, in *PodcastCreate, opts ...grpc.CallOption) (*ID, error)
	GetPodcastById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Podcast, error)
	UpdatePodcast(ctx context.Context, in *PodcastUpdate, opts ...grpc.CallOption) (*Void, error)
	DeletePodcast(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Void, error)
	GetUserPodcasts(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*UserPodcasts, error)
	PublishPodcast(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Success, error)
	ValidatePodcastId(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Success, error)
}

type podcastsClient struct {
	cc grpc.ClientConnInterface
}

func NewPodcastsClient(cc grpc.ClientConnInterface) PodcastsClient {
	return &podcastsClient{cc}
}

func (c *podcastsClient) CreatePodcast(ctx context.Context, in *PodcastCreate, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/podcasts.Podcasts/CreatePodcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podcastsClient) GetPodcastById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Podcast, error) {
	out := new(Podcast)
	err := c.cc.Invoke(ctx, "/podcasts.Podcasts/GetPodcastById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podcastsClient) UpdatePodcast(ctx context.Context, in *PodcastUpdate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/podcasts.Podcasts/UpdatePodcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podcastsClient) DeletePodcast(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/podcasts.Podcasts/DeletePodcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podcastsClient) GetUserPodcasts(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*UserPodcasts, error) {
	out := new(UserPodcasts)
	err := c.cc.Invoke(ctx, "/podcasts.Podcasts/GetUserPodcasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podcastsClient) PublishPodcast(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/podcasts.Podcasts/PublishPodcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podcastsClient) ValidatePodcastId(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/podcasts.Podcasts/ValidatePodcastId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodcastsServer is the server API for Podcasts service.
// All implementations must embed UnimplementedPodcastsServer
// for forward compatibility
type PodcastsServer interface {
	CreatePodcast(context.Context, *PodcastCreate) (*ID, error)
	GetPodcastById(context.Context, *ID) (*Podcast, error)
	UpdatePodcast(context.Context, *PodcastUpdate) (*Void, error)
	DeletePodcast(context.Context, *ID) (*Void, error)
	GetUserPodcasts(context.Context, *Filter) (*UserPodcasts, error)
	PublishPodcast(context.Context, *ID) (*Success, error)
	ValidatePodcastId(context.Context, *ID) (*Success, error)
	mustEmbedUnimplementedPodcastsServer()
}

// UnimplementedPodcastsServer must be embedded to have forward compatible implementations.
type UnimplementedPodcastsServer struct {
}

func (UnimplementedPodcastsServer) CreatePodcast(context.Context, *PodcastCreate) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePodcast not implemented")
}
func (UnimplementedPodcastsServer) GetPodcastById(context.Context, *ID) (*Podcast, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodcastById not implemented")
}
func (UnimplementedPodcastsServer) UpdatePodcast(context.Context, *PodcastUpdate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePodcast not implemented")
}
func (UnimplementedPodcastsServer) DeletePodcast(context.Context, *ID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePodcast not implemented")
}
func (UnimplementedPodcastsServer) GetUserPodcasts(context.Context, *Filter) (*UserPodcasts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPodcasts not implemented")
}
func (UnimplementedPodcastsServer) PublishPodcast(context.Context, *ID) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishPodcast not implemented")
}
func (UnimplementedPodcastsServer) ValidatePodcastId(context.Context, *ID) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePodcastId not implemented")
}
func (UnimplementedPodcastsServer) mustEmbedUnimplementedPodcastsServer() {}

// UnsafePodcastsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodcastsServer will
// result in compilation errors.
type UnsafePodcastsServer interface {
	mustEmbedUnimplementedPodcastsServer()
}

func RegisterPodcastsServer(s grpc.ServiceRegistrar, srv PodcastsServer) {
	s.RegisterService(&Podcasts_ServiceDesc, srv)
}

func _Podcasts_CreatePodcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodcastCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcastsServer).CreatePodcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podcasts.Podcasts/CreatePodcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcastsServer).CreatePodcast(ctx, req.(*PodcastCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podcasts_GetPodcastById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcastsServer).GetPodcastById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podcasts.Podcasts/GetPodcastById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcastsServer).GetPodcastById(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podcasts_UpdatePodcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodcastUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcastsServer).UpdatePodcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podcasts.Podcasts/UpdatePodcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcastsServer).UpdatePodcast(ctx, req.(*PodcastUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podcasts_DeletePodcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcastsServer).DeletePodcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podcasts.Podcasts/DeletePodcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcastsServer).DeletePodcast(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podcasts_GetUserPodcasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcastsServer).GetUserPodcasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podcasts.Podcasts/GetUserPodcasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcastsServer).GetUserPodcasts(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podcasts_PublishPodcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcastsServer).PublishPodcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podcasts.Podcasts/PublishPodcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcastsServer).PublishPodcast(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podcasts_ValidatePodcastId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcastsServer).ValidatePodcastId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podcasts.Podcasts/ValidatePodcastId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcastsServer).ValidatePodcastId(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// Podcasts_ServiceDesc is the grpc.ServiceDesc for Podcasts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Podcasts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podcasts.Podcasts",
	HandlerType: (*PodcastsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePodcast",
			Handler:    _Podcasts_CreatePodcast_Handler,
		},
		{
			MethodName: "GetPodcastById",
			Handler:    _Podcasts_GetPodcastById_Handler,
		},
		{
			MethodName: "UpdatePodcast",
			Handler:    _Podcasts_UpdatePodcast_Handler,
		},
		{
			MethodName: "DeletePodcast",
			Handler:    _Podcasts_DeletePodcast_Handler,
		},
		{
			MethodName: "GetUserPodcasts",
			Handler:    _Podcasts_GetUserPodcasts_Handler,
		},
		{
			MethodName: "PublishPodcast",
			Handler:    _Podcasts_PublishPodcast_Handler,
		},
		{
			MethodName: "ValidatePodcastId",
			Handler:    _Podcasts_ValidatePodcastId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "podcasts.proto",
}
