// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: episode_metadata.proto

package episode_metadata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EpisodeMetadataClient is the client API for EpisodeMetadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EpisodeMetadataClient interface {
	CreateEpisodeMetaData(ctx context.Context, in *EpisodeMetadata, opts ...grpc.CallOption) (*Void, error)
	GetTrendingPodcasts(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Podcasts, error)
	GetRecommendedPodcasts(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Podcasts, error)
	GetPodcastsByGenre(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Podcasts, error)
	SearchEpisode(ctx context.Context, in *Title, opts ...grpc.CallOption) (*Episode, error)
}

type episodeMetadataClient struct {
	cc grpc.ClientConnInterface
}

func NewEpisodeMetadataClient(cc grpc.ClientConnInterface) EpisodeMetadataClient {
	return &episodeMetadataClient{cc}
}

func (c *episodeMetadataClient) CreateEpisodeMetaData(ctx context.Context, in *EpisodeMetadata, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/episode_metadata.episode_metadata/CreateEpisodeMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeMetadataClient) GetTrendingPodcasts(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Podcasts, error) {
	out := new(Podcasts)
	err := c.cc.Invoke(ctx, "/episode_metadata.episode_metadata/GetTrendingPodcasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeMetadataClient) GetRecommendedPodcasts(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Podcasts, error) {
	out := new(Podcasts)
	err := c.cc.Invoke(ctx, "/episode_metadata.episode_metadata/GetRecommendedPodcasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeMetadataClient) GetPodcastsByGenre(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Podcasts, error) {
	out := new(Podcasts)
	err := c.cc.Invoke(ctx, "/episode_metadata.episode_metadata/GetPodcastsByGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeMetadataClient) SearchEpisode(ctx context.Context, in *Title, opts ...grpc.CallOption) (*Episode, error) {
	out := new(Episode)
	err := c.cc.Invoke(ctx, "/episode_metadata.episode_metadata/SearchEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EpisodeMetadataServer is the server API for EpisodeMetadata service.
// All implementations must embed UnimplementedEpisodeMetadataServer
// for forward compatibility
type EpisodeMetadataServer interface {
	CreateEpisodeMetaData(context.Context, *EpisodeMetadata) (*Void, error)
	GetTrendingPodcasts(context.Context, *Void) (*Podcasts, error)
	GetRecommendedPodcasts(context.Context, *ID) (*Podcasts, error)
	GetPodcastsByGenre(context.Context, *Filter) (*Podcasts, error)
	SearchEpisode(context.Context, *Title) (*Episode, error)
	mustEmbedUnimplementedEpisodeMetadataServer()
}

// UnimplementedEpisodeMetadataServer must be embedded to have forward compatible implementations.
type UnimplementedEpisodeMetadataServer struct {
}

func (UnimplementedEpisodeMetadataServer) CreateEpisodeMetaData(context.Context, *EpisodeMetadata) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEpisodeMetaData not implemented")
}
func (UnimplementedEpisodeMetadataServer) GetTrendingPodcasts(context.Context, *Void) (*Podcasts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendingPodcasts not implemented")
}
func (UnimplementedEpisodeMetadataServer) GetRecommendedPodcasts(context.Context, *ID) (*Podcasts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedPodcasts not implemented")
}
func (UnimplementedEpisodeMetadataServer) GetPodcastsByGenre(context.Context, *Filter) (*Podcasts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodcastsByGenre not implemented")
}
func (UnimplementedEpisodeMetadataServer) SearchEpisode(context.Context, *Title) (*Episode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEpisode not implemented")
}
func (UnimplementedEpisodeMetadataServer) mustEmbedUnimplementedEpisodeMetadataServer() {}

// UnsafeEpisodeMetadataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EpisodeMetadataServer will
// result in compilation errors.
type UnsafeEpisodeMetadataServer interface {
	mustEmbedUnimplementedEpisodeMetadataServer()
}

func RegisterEpisodeMetadataServer(s grpc.ServiceRegistrar, srv EpisodeMetadataServer) {
	s.RegisterService(&EpisodeMetadata_ServiceDesc, srv)
}

func _EpisodeMetadata_CreateEpisodeMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpisodeMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeMetadataServer).CreateEpisodeMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/episode_metadata.episode_metadata/CreateEpisodeMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeMetadataServer).CreateEpisodeMetaData(ctx, req.(*EpisodeMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeMetadata_GetTrendingPodcasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeMetadataServer).GetTrendingPodcasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/episode_metadata.episode_metadata/GetTrendingPodcasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeMetadataServer).GetTrendingPodcasts(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeMetadata_GetRecommendedPodcasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeMetadataServer).GetRecommendedPodcasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/episode_metadata.episode_metadata/GetRecommendedPodcasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeMetadataServer).GetRecommendedPodcasts(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeMetadata_GetPodcastsByGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeMetadataServer).GetPodcastsByGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/episode_metadata.episode_metadata/GetPodcastsByGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeMetadataServer).GetPodcastsByGenre(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeMetadata_SearchEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Title)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeMetadataServer).SearchEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/episode_metadata.episode_metadata/SearchEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeMetadataServer).SearchEpisode(ctx, req.(*Title))
	}
	return interceptor(ctx, in, info, handler)
}

// EpisodeMetadata_ServiceDesc is the grpc.ServiceDesc for EpisodeMetadata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EpisodeMetadata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "episode_metadata.episode_metadata",
	HandlerType: (*EpisodeMetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEpisodeMetaData",
			Handler:    _EpisodeMetadata_CreateEpisodeMetaData_Handler,
		},
		{
			MethodName: "GetTrendingPodcasts",
			Handler:    _EpisodeMetadata_GetTrendingPodcasts_Handler,
		},
		{
			MethodName: "GetRecommendedPodcasts",
			Handler:    _EpisodeMetadata_GetRecommendedPodcasts_Handler,
		},
		{
			MethodName: "GetPodcastsByGenre",
			Handler:    _EpisodeMetadata_GetPodcastsByGenre_Handler,
		},
		{
			MethodName: "SearchEpisode",
			Handler:    _EpisodeMetadata_SearchEpisode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "episode_metadata.proto",
}
