// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: episodes.proto

package episodes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EpisodesServiceClient is the client API for EpisodesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EpisodesServiceClient interface {
	CreatePodcastEpisode(ctx context.Context, in *EpisodeCreate, opts ...grpc.CallOption) (*ID, error)
	GetEpisodesByPodcastId(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Episodes, error)
	UpdateEpisode(ctx context.Context, in *IDs, opts ...grpc.CallOption) (*Void, error)
	DeleteEpisode(ctx context.Context, in *IDsForDelete, opts ...grpc.CallOption) (*Void, error)
	SearchEpisodeByTitle(ctx context.Context, in *Title, opts ...grpc.CallOption) (*Episode, error)
	ValidateEpisodeId(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Success, error)
}

type episodesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEpisodesServiceClient(cc grpc.ClientConnInterface) EpisodesServiceClient {
	return &episodesServiceClient{cc}
}

func (c *episodesServiceClient) CreatePodcastEpisode(ctx context.Context, in *EpisodeCreate, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/episodes.EpisodesService/CreatePodcastEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodesServiceClient) GetEpisodesByPodcastId(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Episodes, error) {
	out := new(Episodes)
	err := c.cc.Invoke(ctx, "/episodes.EpisodesService/GetEpisodesByPodcastId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodesServiceClient) UpdateEpisode(ctx context.Context, in *IDs, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/episodes.EpisodesService/UpdateEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodesServiceClient) DeleteEpisode(ctx context.Context, in *IDsForDelete, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/episodes.EpisodesService/DeleteEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodesServiceClient) SearchEpisodeByTitle(ctx context.Context, in *Title, opts ...grpc.CallOption) (*Episode, error) {
	out := new(Episode)
	err := c.cc.Invoke(ctx, "/episodes.EpisodesService/SearchEpisodeByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodesServiceClient) ValidateEpisodeId(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/episodes.EpisodesService/ValidateEpisodeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EpisodesServiceServer is the server API for EpisodesService service.
// All implementations must embed UnimplementedEpisodesServiceServer
// for forward compatibility
type EpisodesServiceServer interface {
	CreatePodcastEpisode(context.Context, *EpisodeCreate) (*ID, error)
	GetEpisodesByPodcastId(context.Context, *Filter) (*Episodes, error)
	UpdateEpisode(context.Context, *IDs) (*Void, error)
	DeleteEpisode(context.Context, *IDsForDelete) (*Void, error)
	SearchEpisodeByTitle(context.Context, *Title) (*Episode, error)
	ValidateEpisodeId(context.Context, *ID) (*Success, error)
	mustEmbedUnimplementedEpisodesServiceServer()
}

// UnimplementedEpisodesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEpisodesServiceServer struct {
}

func (UnimplementedEpisodesServiceServer) CreatePodcastEpisode(context.Context, *EpisodeCreate) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePodcastEpisode not implemented")
}
func (UnimplementedEpisodesServiceServer) GetEpisodesByPodcastId(context.Context, *Filter) (*Episodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpisodesByPodcastId not implemented")
}
func (UnimplementedEpisodesServiceServer) UpdateEpisode(context.Context, *IDs) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEpisode not implemented")
}
func (UnimplementedEpisodesServiceServer) DeleteEpisode(context.Context, *IDsForDelete) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEpisode not implemented")
}
func (UnimplementedEpisodesServiceServer) SearchEpisodeByTitle(context.Context, *Title) (*Episode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEpisodeByTitle not implemented")
}
func (UnimplementedEpisodesServiceServer) ValidateEpisodeId(context.Context, *ID) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateEpisodeId not implemented")
}
func (UnimplementedEpisodesServiceServer) mustEmbedUnimplementedEpisodesServiceServer() {}

// UnsafeEpisodesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EpisodesServiceServer will
// result in compilation errors.
type UnsafeEpisodesServiceServer interface {
	mustEmbedUnimplementedEpisodesServiceServer()
}

func RegisterEpisodesServiceServer(s grpc.ServiceRegistrar, srv EpisodesServiceServer) {
	s.RegisterService(&EpisodesService_ServiceDesc, srv)
}

func _EpisodesService_CreatePodcastEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpisodeCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodesServiceServer).CreatePodcastEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/episodes.EpisodesService/CreatePodcastEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodesServiceServer).CreatePodcastEpisode(ctx, req.(*EpisodeCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodesService_GetEpisodesByPodcastId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodesServiceServer).GetEpisodesByPodcastId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/episodes.EpisodesService/GetEpisodesByPodcastId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodesServiceServer).GetEpisodesByPodcastId(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodesService_UpdateEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodesServiceServer).UpdateEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/episodes.EpisodesService/UpdateEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodesServiceServer).UpdateEpisode(ctx, req.(*IDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodesService_DeleteEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsForDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodesServiceServer).DeleteEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/episodes.EpisodesService/DeleteEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodesServiceServer).DeleteEpisode(ctx, req.(*IDsForDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodesService_SearchEpisodeByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Title)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodesServiceServer).SearchEpisodeByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/episodes.EpisodesService/SearchEpisodeByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodesServiceServer).SearchEpisodeByTitle(ctx, req.(*Title))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodesService_ValidateEpisodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodesServiceServer).ValidateEpisodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/episodes.EpisodesService/ValidateEpisodeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodesServiceServer).ValidateEpisodeId(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// EpisodesService_ServiceDesc is the grpc.ServiceDesc for EpisodesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EpisodesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "episodes.EpisodesService",
	HandlerType: (*EpisodesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePodcastEpisode",
			Handler:    _EpisodesService_CreatePodcastEpisode_Handler,
		},
		{
			MethodName: "GetEpisodesByPodcastId",
			Handler:    _EpisodesService_GetEpisodesByPodcastId_Handler,
		},
		{
			MethodName: "UpdateEpisode",
			Handler:    _EpisodesService_UpdateEpisode_Handler,
		},
		{
			MethodName: "DeleteEpisode",
			Handler:    _EpisodesService_DeleteEpisode_Handler,
		},
		{
			MethodName: "SearchEpisodeByTitle",
			Handler:    _EpisodesService_SearchEpisodeByTitle_Handler,
		},
		{
			MethodName: "ValidateEpisodeId",
			Handler:    _EpisodesService_ValidateEpisodeId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "episodes.proto",
}
