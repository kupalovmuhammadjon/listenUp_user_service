// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: comments.proto

package comments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentsClient is the client API for Comments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentsClient interface {
	CreateCommentByPodcastId(ctx context.Context, in *CreateComment, opts ...grpc.CallOption) (*ID, error)
	GetCommentsByPodcastId(ctx context.Context, in *CommentFilter, opts ...grpc.CallOption) (*AllComments, error)
	CreateCommentByEpisodeId(ctx context.Context, in *EpisodeComment, opts ...grpc.CallOption) (*ID, error)
	GetCommentsByEpisodeId(ctx context.Context, in *CommentFilter, opts ...grpc.CallOption) (*AllComments, error)
	CountComments(ctx context.Context, in *CountFilter, opts ...grpc.CallOption) (*CommentCount, error)
	ValidateCommentId(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Exists, error)
}

type commentsClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentsClient(cc grpc.ClientConnInterface) CommentsClient {
	return &commentsClient{cc}
}

func (c *commentsClient) CreateCommentByPodcastId(ctx context.Context, in *CreateComment, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/comments.Comments/CreateCommentByPodcastId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) GetCommentsByPodcastId(ctx context.Context, in *CommentFilter, opts ...grpc.CallOption) (*AllComments, error) {
	out := new(AllComments)
	err := c.cc.Invoke(ctx, "/comments.Comments/GetCommentsByPodcastId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) CreateCommentByEpisodeId(ctx context.Context, in *EpisodeComment, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/comments.Comments/CreateCommentByEpisodeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) GetCommentsByEpisodeId(ctx context.Context, in *CommentFilter, opts ...grpc.CallOption) (*AllComments, error) {
	out := new(AllComments)
	err := c.cc.Invoke(ctx, "/comments.Comments/GetCommentsByEpisodeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) CountComments(ctx context.Context, in *CountFilter, opts ...grpc.CallOption) (*CommentCount, error) {
	out := new(CommentCount)
	err := c.cc.Invoke(ctx, "/comments.Comments/CountComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) ValidateCommentId(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := c.cc.Invoke(ctx, "/comments.Comments/ValidateCommentId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsServer is the server API for Comments service.
// All implementations must embed UnimplementedCommentsServer
// for forward compatibility
type CommentsServer interface {
	CreateCommentByPodcastId(context.Context, *CreateComment) (*ID, error)
	GetCommentsByPodcastId(context.Context, *CommentFilter) (*AllComments, error)
	CreateCommentByEpisodeId(context.Context, *EpisodeComment) (*ID, error)
	GetCommentsByEpisodeId(context.Context, *CommentFilter) (*AllComments, error)
	CountComments(context.Context, *CountFilter) (*CommentCount, error)
	ValidateCommentId(context.Context, *ID) (*Exists, error)
	mustEmbedUnimplementedCommentsServer()
}

// UnimplementedCommentsServer must be embedded to have forward compatible implementations.
type UnimplementedCommentsServer struct {
}

func (UnimplementedCommentsServer) CreateCommentByPodcastId(context.Context, *CreateComment) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentByPodcastId not implemented")
}
func (UnimplementedCommentsServer) GetCommentsByPodcastId(context.Context, *CommentFilter) (*AllComments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByPodcastId not implemented")
}
func (UnimplementedCommentsServer) CreateCommentByEpisodeId(context.Context, *EpisodeComment) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentByEpisodeId not implemented")
}
func (UnimplementedCommentsServer) GetCommentsByEpisodeId(context.Context, *CommentFilter) (*AllComments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByEpisodeId not implemented")
}
func (UnimplementedCommentsServer) CountComments(context.Context, *CountFilter) (*CommentCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountComments not implemented")
}
func (UnimplementedCommentsServer) ValidateCommentId(context.Context, *ID) (*Exists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCommentId not implemented")
}
func (UnimplementedCommentsServer) mustEmbedUnimplementedCommentsServer() {}

// UnsafeCommentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentsServer will
// result in compilation errors.
type UnsafeCommentsServer interface {
	mustEmbedUnimplementedCommentsServer()
}

func RegisterCommentsServer(s grpc.ServiceRegistrar, srv CommentsServer) {
	s.RegisterService(&Comments_ServiceDesc, srv)
}

func _Comments_CreateCommentByPodcastId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).CreateCommentByPodcastId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments.Comments/CreateCommentByPodcastId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).CreateCommentByPodcastId(ctx, req.(*CreateComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_GetCommentsByPodcastId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).GetCommentsByPodcastId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments.Comments/GetCommentsByPodcastId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).GetCommentsByPodcastId(ctx, req.(*CommentFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_CreateCommentByEpisodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpisodeComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).CreateCommentByEpisodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments.Comments/CreateCommentByEpisodeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).CreateCommentByEpisodeId(ctx, req.(*EpisodeComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_GetCommentsByEpisodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).GetCommentsByEpisodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments.Comments/GetCommentsByEpisodeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).GetCommentsByEpisodeId(ctx, req.(*CommentFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_CountComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).CountComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments.Comments/CountComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).CountComments(ctx, req.(*CountFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_ValidateCommentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).ValidateCommentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments.Comments/ValidateCommentId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).ValidateCommentId(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// Comments_ServiceDesc is the grpc.ServiceDesc for Comments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comments.Comments",
	HandlerType: (*CommentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommentByPodcastId",
			Handler:    _Comments_CreateCommentByPodcastId_Handler,
		},
		{
			MethodName: "GetCommentsByPodcastId",
			Handler:    _Comments_GetCommentsByPodcastId_Handler,
		},
		{
			MethodName: "CreateCommentByEpisodeId",
			Handler:    _Comments_CreateCommentByEpisodeId_Handler,
		},
		{
			MethodName: "GetCommentsByEpisodeId",
			Handler:    _Comments_GetCommentsByEpisodeId_Handler,
		},
		{
			MethodName: "CountComments",
			Handler:    _Comments_CountComments_Handler,
		},
		{
			MethodName: "ValidateCommentId",
			Handler:    _Comments_ValidateCommentId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comments.proto",
}
