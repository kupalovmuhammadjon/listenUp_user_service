// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: user_interactions.proto

package user_interactions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserInteractionsClient is the client API for UserInteractions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInteractionsClient interface {
	LikeEpisodeOfPodcast(ctx context.Context, in *InteractEpisode, opts ...grpc.CallOption) (*ID, error)
	DeleteLikeFromEpisodeOfPodcast(ctx context.Context, in *DeleteLike, opts ...grpc.CallOption) (*Success, error)
	ListenEpisodeOfPodcast(ctx context.Context, in *InteractEpisode, opts ...grpc.CallOption) (*ID, error)
}

type userInteractionsClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInteractionsClient(cc grpc.ClientConnInterface) UserInteractionsClient {
	return &userInteractionsClient{cc}
}

func (c *userInteractionsClient) LikeEpisodeOfPodcast(ctx context.Context, in *InteractEpisode, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/user_interactions.user_interactions/LikeEpisodeOfPodcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInteractionsClient) DeleteLikeFromEpisodeOfPodcast(ctx context.Context, in *DeleteLike, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/user_interactions.user_interactions/DeleteLikeFromEpisodeOfPodcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInteractionsClient) ListenEpisodeOfPodcast(ctx context.Context, in *InteractEpisode, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/user_interactions.user_interactions/ListenEpisodeOfPodcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInteractionsServer is the server API for UserInteractions service.
// All implementations must embed UnimplementedUserInteractionsServer
// for forward compatibility
type UserInteractionsServer interface {
	LikeEpisodeOfPodcast(context.Context, *InteractEpisode) (*ID, error)
	DeleteLikeFromEpisodeOfPodcast(context.Context, *DeleteLike) (*Success, error)
	ListenEpisodeOfPodcast(context.Context, *InteractEpisode) (*ID, error)
	mustEmbedUnimplementedUserInteractionsServer()
}

// UnimplementedUserInteractionsServer must be embedded to have forward compatible implementations.
type UnimplementedUserInteractionsServer struct {
}

func (UnimplementedUserInteractionsServer) LikeEpisodeOfPodcast(context.Context, *InteractEpisode) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeEpisodeOfPodcast not implemented")
}
func (UnimplementedUserInteractionsServer) DeleteLikeFromEpisodeOfPodcast(context.Context, *DeleteLike) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLikeFromEpisodeOfPodcast not implemented")
}
func (UnimplementedUserInteractionsServer) ListenEpisodeOfPodcast(context.Context, *InteractEpisode) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenEpisodeOfPodcast not implemented")
}
func (UnimplementedUserInteractionsServer) mustEmbedUnimplementedUserInteractionsServer() {}

// UnsafeUserInteractionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInteractionsServer will
// result in compilation errors.
type UnsafeUserInteractionsServer interface {
	mustEmbedUnimplementedUserInteractionsServer()
}

func RegisterUserInteractionsServer(s grpc.ServiceRegistrar, srv UserInteractionsServer) {
	s.RegisterService(&UserInteractions_ServiceDesc, srv)
}

func _UserInteractions_LikeEpisodeOfPodcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractEpisode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInteractionsServer).LikeEpisodeOfPodcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_interactions.user_interactions/LikeEpisodeOfPodcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInteractionsServer).LikeEpisodeOfPodcast(ctx, req.(*InteractEpisode))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInteractions_DeleteLikeFromEpisodeOfPodcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLike)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInteractionsServer).DeleteLikeFromEpisodeOfPodcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_interactions.user_interactions/DeleteLikeFromEpisodeOfPodcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInteractionsServer).DeleteLikeFromEpisodeOfPodcast(ctx, req.(*DeleteLike))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInteractions_ListenEpisodeOfPodcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractEpisode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInteractionsServer).ListenEpisodeOfPodcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_interactions.user_interactions/ListenEpisodeOfPodcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInteractionsServer).ListenEpisodeOfPodcast(ctx, req.(*InteractEpisode))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInteractions_ServiceDesc is the grpc.ServiceDesc for UserInteractions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInteractions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_interactions.user_interactions",
	HandlerType: (*UserInteractionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikeEpisodeOfPodcast",
			Handler:    _UserInteractions_LikeEpisodeOfPodcast_Handler,
		},
		{
			MethodName: "DeleteLikeFromEpisodeOfPodcast",
			Handler:    _UserInteractions_DeleteLikeFromEpisodeOfPodcast_Handler,
		},
		{
			MethodName: "ListenEpisodeOfPodcast",
			Handler:    _UserInteractions_ListenEpisodeOfPodcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_interactions.proto",
}
